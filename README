Write-up for PA4
----------------
For this project my partner and I needed to implement type checking
for the cool programming language. We started this by reading through the
skeleton files provided to get an overview of what was missing. From that we
started off at the entry point provided and proceeded to break the project into
two components. The first was to check for cyclic inheritance and class type checking.

The initial round of checks was done when we build a new ClassTable. In the constructor
for the class we do a series of calls that begin with installbasicclasses. This puts the
predefined classes, Object, int, string, bool, and IO, into our working classtable. Then
we walk through each class that is passed in and add it to the table. At the same time we
build a parentTable that houses a list of each parents children for use when checking cycles.
Once that is done we check the classes for the uninheritable types defined in the cool manual.
If that passes, we begin our check for cycles. The way that we do this is we walk through each
class and mark the entry point as visited. We then walk through all of its children and check
if we hit the visited node again. We do this for every single class in the table. Although this
causes repeated checks on certain families, it is the only way to be thorough. If this comes
back without any errors the graph is acyclic and inheritance checks are ok. Then we move onto
the type checking aspect.

To typecheck the tree, we first define a symbol table that houses all of the ID's and performs 
scoping and keeps track of the value of variables within the current scope. Then we walk through
all of the classes again and this time call our type checking function, semantCheck that we wrote.
semantCheck takes in a symbol table, the class table we defined earlier, and our current class for
name lookup. From this point, our semantCheck dives into the different levels of defintion walking
though first the features, then attributes and methods. The attributes and methods then break
into all of the other items from constants to dispatches to expressions. Each method has its own 
semantCheck that gets called and which in turn calls its sub-members semantChecks. It is important
to note that along the way, we are dynamically setting the self.set_type() of each class. This is 
so that when the AST calls dump with types, the specific type is printed out along with the name.
If there is ever a problem with a semantic check, we call classTable.semantError and print out 
an error message that is tailored for the issue. We continue checking though and only break after
the entire set of classes is type checked. We decided to write our semantCheck functions as return
type void because it was easier for us to just set the type within the function itself instead of
setting it after the call. This allowed for easier calls to deep levels of expressions without having
to keep track of the return type across calls.

Some key functions that we wrote included formalLookup and attrLookup that are defined in classtable.
These functions are used to get specific formals and attributes so as to keep the level of complexity 
in our semantCheck functions down. Another important function was typeCheck. This function is used
to ensure that the type of arguement 2 conforms to the type of arguement 1. This is done by doing a 
recursive call on the function that steps up through type 1's parents until it either finds a match
or errors out. LeastUpperBound is a function that finds the closest relative to both types passed in.
This is performed by putting the types and their parents into a list and then walking from the top
down in each list until the types do not match. Then the last type checked is the LUB. FInally we have
a function called toReturn that checks to ensure that the parameters in the method call and
definition type match, then it returns the return type of the defined method in the specified class.

